/*! Kuzzle javascript SDK version 6.0.0 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Kuzzle=t():e.Kuzzle=t()}(window,function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(i,o,function(t){return e[t]}.bind(null,o));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t){e.exports=class{constructor(e,t={},r={},i={}){this.kuzzle=e,this.request=t,this.options=r,this.response=i,this.hits=i.hits||[],this.fetched=this.hits.length,this.total=i.total||0,this.controller=t.controller,this.searchAction="search",this.scrollAction="scroll"}next(){if(this.fetched>=this.total)return Promise.resolve(null);if(this.request.scroll)return this.kuzzle.query(Object.assign({},this.request,{action:this.scrollAction,scrollId:this.response.scrollId}),this.options).then(e=>(this.fetched+=e.hits.length,this.response=e,this.hits=e.hits,this));if(this.request.size&&this.request.sort){const e=Object.assign({},this.request,{action:this.searchAction,search_after:[]}),t=this.response.hits&&this.response.hits[this.response.hits.length-1];for(const r of this.request.sort)"string"==typeof r?e.search_after.push(t._source[r]):e.search_after.push(t._source[Object.keys(r)[0]]);return this.kuzzle.query(e,this.options).then(e=>(this.fetched+=e.hits.length,this.response=e,this.hits=e.hits,this))}if(this.request.from&&this.request.size)return this.request.from>=this.response.total?Promise.resolve(null):this.kuzzle.query(Object.assign({},this.request,{action:this.searchAction,from:this.fetched}),this.options).then(e=>(this.fetched+=e.hits.length,this.response=e,this.hits=e.hits,this));throw new Error("Unable to retrieve next results from search: missing scrollId, from/sort, or from/size params")}}},function(e,t){let r;e.exports=class{constructor(e,t=null,i={},o={}){r=e,this._id=t,this.content=i,this.meta=o}get kuzzle(){return r}get profileIds(){return this.content.profileIds||[]}getProfiles(){return this.profileIds&&0!==this.profileIds.length?this.kuzzle.security.mGetProfiles(this.profileIds):Promise.resolve([])}}},function(e,t){class r{constructor(e,t=!1){this.fn=e,this.once=t}}e.exports=class{constructor(){this._events={}}_exists(e,t){return Boolean(e.find(e=>e.fn===t))}listeners(e){return void 0===this._events[e]?[]:this._events[e].map(e=>e.fn)}addListener(e,t,i=!1){if(!e||!t)return this;const o=typeof t;if("function"!==o)throw new Error(`Invalid listener type: expected a function, got a ${o}`);return void 0===this._events[e]&&(this._events[e]=[]),this._exists(this._events[e],t)||this._events[e].push(new r(t,i)),this}on(e,t){return this.addListener(e,t)}prependListener(e,t,i=!1){return e&&t?(void 0===this._events[e]&&(this._events[e]=[]),this._exists(this._events[e],t)||(this._events[e]=[new r(t,i)].concat(this._events[e])),this):this}addOnceListener(e,t){return this.addListener(e,t,!0)}once(e,t){return this.addOnceListener(e,t)}prependOnceListener(e,t){return this.prependListener(e,t,!0)}removeListener(e,t){const r=this._events[e];if(!r||!r.length)return this;const i=r.findIndex(e=>e.fn===t);return-1!==i&&r.splice(i,1),0===r.length&&delete this._events[e],this}removeAllListeners(e){return e?delete this._events[e]:this._events={},this}emit(e,...t){const r=this._events[e];if(void 0===r)return!1;const i=[];for(const e of r)e.fn(...t),e.once&&i.push(e.fn);for(const t of i)this.removeListener(e,t);return!0}eventNames(){return Object.keys(this._events)}listenerCount(e){return this._events[e]&&this._events[e].length||0}}},function(e,t){let r;e.exports=class{constructor(e,t=null,i={}){r=e,this._id=t,this.controllers=i}get kuzzle(){return r}}},function(e,t){let r;e.exports=class{constructor(e,t=null,i=[]){r=e,this._id=t,this.policies=i}get kuzzle(){return r}getRoles(e={}){return this.policies&&0!==this.policies.length?this.kuzzle.security.mGetRoles(this.policies.map(e=>e.roleId),e):Promise.resolve([])}}},function(e,t,r){"use strict";const i=r(6),o=r(2),s=i();let n,u,l;class c extends o{constructor(e={}){super(),n=e.host,u="number"==typeof e.port?e.port:7512,l="boolean"==typeof e.sslConnection&&e.sslConnection,this.autoReplay=!1,this.autoQueue=!1,this.offlineQueue=[],this.offlineQueueLoader=null,this.queueFilter=null,this.queueMaxSize=500,this.queueTTL=12e4,this.queuing=!1,this.replayInterval=10,this.state="offline",Object.keys(e).forEach(t=>{this.hasOwnProperty(t)&&Object.getOwnPropertyDescriptor(this,t).writable&&(this[t]=e[t])})}get id(){return s}get host(){return n}get port(){return u}get ssl(){return l}connect(){throw new Error('Method "connect" is not implemented')}send(){throw new Error('Method "send" is not implemented')}clientConnected(e,t){this.state=e||"ready",this.emit(t?"reconnect":"connect"),this.autoQueue&&this.stopQueuing(),this.autoReplay&&this.playQueue()}close(){this.state="offline",this.autoQueue&&this.startQueuing()}flushQueue(){this.offlineQueue=[]}playQueue(){this.isReady()&&(this._cleanQueue(),this._dequeue())}startQueuing(){this.queuing=!0}stopQueuing(){this.queuing=!1}query(e,t){let r=t&&!1!==t.queuable||!0;return this.queueFilter&&(r=r&&this.queueFilter(e)),this.queuing&&r?(this._cleanQueue(),this.emit("offlineQueuePush",{request:e}),new Promise((t,r)=>{this.offlineQueue.push({resolve:t,reject:r,request:e,ts:Date.now()})})):this.isReady()?this._emitRequest(e):Promise.reject(new Error(`Unable to execute request: not connected to a Kuzzle server.\nDiscarded request: ${JSON.stringify(e)}`))}isReady(){return"ready"===this.state}_cleanQueue(){const e=Date.now();let t=-1;this.queueTTL>0&&(this.offlineQueue.forEach((r,i)=>{r.ts<e-this.queueTTL&&(t=i)}),-1!==t&&this.offlineQueue.splice(0,t+1).forEach(e=>{this.emit("offlineQueuePop",e.query)})),this.queueMaxSize>0&&this.offlineQueue.length>this.queueMaxSize&&this.offlineQueue.splice(0,this.offlineQueue.length-this.queueMaxSize).forEach(e=>{this.emit("offlineQueuePop",e.query)})}_dequeue(){const e={},t=()=>{this.offlineQueue.length>0&&(this._emitRequest(this.offlineQueue[0].request).then(this.offlineQueue[0].resolve).catch(this.offlineQueue[0].reject),this.emit("offlineQueuePop",this.offlineQueue.shift()),setTimeout(()=>{t()},Math.max(0,this.replayInterval)))};if(this.offlineQueueLoader){if("function"!=typeof this.offlineQueueLoader)throw new Error("Invalid value for offlineQueueLoader property. Expected: function. Got: "+typeof this.offlineQueueLoader);const t=this.offlineQueueLoader();if(!Array.isArray(t))throw new Error("Invalid value returned by the offlineQueueLoader function. Expected: array. Got: "+typeof t);this.offlineQueue=t.concat(this.offlineQueue).filter(t=>{if(!t.request||void 0===t.request.requestId||!t.request.action||!t.request.controller)throw new Error("Invalid offline queue request. One or more missing properties: requestId, action, controller.");return!e.hasOwnProperty(t.request.requestId)&&(e[t.request.requestId]=!0)})}t()}_emitRequest(e){return new Promise((t,r)=>{this.once(e.requestId,i=>{if(i.error){const t=new Error(i.error.message);return Object.assign(t,i.error),t.status=i.status,i.error=t,this.emit("queryError",t,e),"logout"!==e.action&&"Token expired"===t.message&&this.emit("tokenExpired"),r(t)}return t(i)}),this.send(e)})}}for(const e of["host","id","port","ssl"])Object.defineProperty(c.prototype,e,{enumerable:!0});e.exports=c},function(e,t){const r=e=>e?(e^16*Math.random()>>e/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,r);e.exports=r},function(e,t,r){"use strict";const i=r(5);class o extends i{constructor(e={}){super(e),this._autoReconnect="boolean"!=typeof e.autoReconnect||e.autoReconnect,this._reconnectionDelay="number"==typeof e.reconnectionDelay?e.reconnectionDelay:1e3,"auto"===e.offlineMode&&this.autoReconnect&&(this.autoQueue=!0,this.autoReplay=!0),this.wasConnected=!1,this.stopRetryingToConnect=!1,this.retrying=!1}get autoReconnect(){return this._autoReconnect}get reconnectionDelay(){return this._reconnectionDelay}connect(){this.state="connecting",this.autoQueue&&this.startQueuing()}clientConnected(){super.clientConnected("connected",this.wasConnected),this.state="connected",this.wasConnected=!0,this.stopRetryingToConnect=!1}clientDisconnected(){this.emit("disconnect")}clientNetworkError(e){this.state="offline",this.autoQueue&&this.startQueuing();const t=new Error(`Unable to connect to kuzzle server at ${this.host}:${this.port}`);t.internal=e,this.emit("networkError",t),!this.autoReconnect||this.retrying||this.stopRetryingToConnect?this.emit("disconnect"):(this.retrying=!0,setTimeout(()=>{this.retrying=!1,this.connect(this.host)},this.reconnectionDelay))}isReady(){return"connected"===this.state}}for(const e of["autoReconnect","reconnectionDelay"])Object.defineProperty(o.prototype,e,{enumerable:!0});e.exports=o},function(e,t,r){const i=r(2),o=r(9),s=r(10),n=r(11),u=r(13),l=r(15),c=r(16),d=r(18),a=r(19),h=r(23),f=r(24),p=r(6),z=["connected","discarded","disconnected","loginAttempt","networkError","offlineQueuePush","offlineQueuePop","queryError","reconnected","tokenExpired"];class y extends i{constructor(e,t={}){if(super(),void 0===e||null===e)throw new Error('"network" argument missing');if("string"==typeof e)return new y(f(e,t),t);for(const t of["addListener","isReady","query"])if("function"!=typeof e[t])throw new Error(`Network instance must implement a "${t}" method`);this.network=e,this._protectedEvents={connected:{},error:{},disconnected:{},reconnected:{},tokenExpired:{},loginAttempt:{}},this.autoResubscribe="boolean"!=typeof t.autoResubscribe||t.autoResubscribe,this.eventTimeout="number"==typeof t.eventTimeout?t.eventTimeout:200,this.sdkVersion="6.0.0",this.volatile="object"==typeof t.volatile?t.volatile:{},this.auth=new o(this),this.bulk=new s(this),this.collection=new n(this),this.document=new u(this),this.index=new l(this),this.ms=new h(this),this.realtime=new c(this),this.security=new a(this),this.server=new d(this),this.network.addListener("offlineQueuePush",e=>this.emit("offlineQueuePush",e)),this.network.addListener("offlineQueuePop",e=>this.emit("offlineQueuePop",e)),this.network.addListener("queryError",(e,t)=>this.emit("queryError",e,t)),this.network.addListener("tokenExpired",()=>{this.jwt=void 0,this.emit("tokenExpired")})}get autoQueue(){return this.network.autoQueue}set autoQueue(e){this._checkPropertyType("autoQueue","boolean",e),this.network.autoQueue=e}get autoReconnect(){return this.network.autoReconnect}set autoReconnect(e){this._checkPropertyType("autoReconnect","boolean",e),this.network.autoReconnect=e}get autoReplay(){return this.network.autoReplay}set autoReplay(e){this._checkPropertyType("autoReplay","boolean",e),this.network.autoReplay=e}get jwt(){return this._jwt}set jwt(e){if(void 0===e||null===e)this._jwt=void 0;else if("string"==typeof e)this._jwt=e;else{if("object"!=typeof e||!e.result||!e.result.jwt||"string"!=typeof e.result.jwt)throw new Error(`Invalid token argument: ${e}`);this._jwt=e.result.jwt}}get host(){return this.network.host}get offlineQueue(){return this.network.offlineQueue}get offlineQueueLoader(){return this.network.offlineQueueLoader}set offlineQueueLoader(e){this._checkPropertyType("offlineQueueLoader","function",e),this.network.offlineQueueLoader=e}get port(){return this.network.port}get queueFilter(){return this.network.queueFilter}set queueFilter(e){this._checkPropertyType("queueFilter","function",e),this.network.queueFilter=e}get queueMaxSize(){return this.network.queueMaxSize}set queueMaxSize(e){this._checkPropertyType("queueMaxSize","number",e),this.network.queueMaxSize=e}get queueTTL(){return this.network.queueTTL}set queueTTL(e){this._checkPropertyType("queueTTL","number",e),this.network.queueTTL=e}get reconnectionDelay(){return this.network.reconnectionDelay}get replayInterval(){return this.network.replayInterval}set replayInterval(e){this._checkPropertyType("replayInterval","number",e),this.network.replayInterval=e}get sslConnection(){return this.network.sslConnection}emit(e,...t){const r=Date.now(),i=this._protectedEvents[e];if(i){if(i.lastEmitted&&i.lastEmitted>r-this.eventTimeout)return!1;i.lastEmitted=r}super.emit(e,...t)}connect(){return this.network.isReady()?Promise.resolve():(this.network.addListener("connect",()=>{this.emit("connected")}),this.network.addListener("networkError",e=>{this.emit("networkError",e)}),this.network.addListener("disconnect",()=>{this.emit("disconnected")}),this.network.addListener("reconnect",()=>{this.jwt?this.checkToken(this.jwt,(e,t)=>{!e&&t.valid||(this.jwt=void 0),this.emit("reconnected")}):this.emit("reconnected")}),this.network.addListener("discarded",e=>this.emit("discarded",e)),this.network.connect())}addListener(e,t){if(-1===z.indexOf(e))throw new Error(`[${e}] is not a known event. Known events: ${z.toString()}`);return super.addListener(e,t)}flushQueue(){return this.network.flushQueue(),this}disconnect(){this.network.close()}query(e={},t={}){if("object"!=typeof e||Array.isArray(e))throw new Error(`Kuzzle.query: Invalid request: ${JSON.stringify(e)}`);if("object"!=typeof t||Array.isArray(t))throw new Error(`Kuzzle.query: Invalid "options" argument: ${JSON.stringify(t)}`);if(e.requestId||(e.requestId=p()),e.refresh&&(e.refresh="wait_for"),e.volatile){if("object"!=typeof e.volatile||Array.isArray(e.volatile))throw new Error(`Kuzzle.query: Invalid volatile argument received: ${JSON.stringify(e.volatile)}`)}else e.volatile=this.volatile;for(const t of Object.keys(this.volatile))void 0===e.volatile[t]&&(e.volatile[t]=this.volatile[t]);return e.volatile.sdkInstanceId=this.network.id,e.volatile.sdkVersion=this.sdkVersion,void 0!==this.jwt&&"auth"!==e.controller&&"checkToken"!==e.action&&(e.jwt=this.jwt),this.network.query(e,t).then(e=>e.result)}startQueuing(){return this.network.startQueuing(),this}stopQueuing(){return this.network.stopQueuing(),this}replayQueue(){return this.playQueue()}playQueue(){return this.network.playQueue(),this}_checkPropertyType(e,t,r){if("array"===t?!Array.isArray(r):typeof r!==t)throw new Error(`Expected ${e} to be a ${t}, ${typeof r} received`)}}for(const e of["autoQueue","autoReconnect","autoReplay","jwt","host","offlineQueue","offlineQueueLoader","port","queueFilter","queueMaxSize","queueTTL","reconnectionDelay","replayInterval","sslConnection"])Object.defineProperty(y.prototype,e,{enumerable:!0});e.exports=y},function(e,t,r){const i=r(1),o=Symbol();e.exports=class{constructor(e){this[o]=e}get kuzzle(){return this[o]}checkToken(e){return this.kuzzle.query({controller:"auth",action:"checkToken",body:{token:e}},{queuable:!1})}createMyCredentials(e,t,r={}){return this.kuzzle.query({strategy:e,controller:"auth",action:"createMyCredentials",body:t},r)}credentialsExist(e,t={}){return this.kuzzle.query({strategy:e,controller:"auth",action:"credentialsExist"},t)}deleteMyCredentials(e,t={}){return this.kuzzle.query({strategy:e,controller:"auth",action:"deleteMyCredentials"},t)}getCurrentUser(e={}){return this.kuzzle.query({controller:"auth",action:"getCurrentUser"},e).then(e=>new i(this.kuzzle,e._id,e._source,e._meta))}getMyCredentials(e,t={}){return this.kuzzle.query({strategy:e,controller:"auth",action:"getMyCredentials"},t)}getMyRights(e={}){return this.kuzzle.query({controller:"auth",action:"getMyRights"},e).then(e=>e.hits)}getStrategies(e={}){return this.kuzzle.query({controller:"auth",action:"getStrategies"},e)}login(e,t,r){if("string"!=typeof e||""===e)throw new Error("Kuzzle.auth.login: strategy is required");const i={strategy:e,expiresIn:r,body:t||{},controller:"auth",action:"login"};return this.kuzzle.query(i,{queuable:!1}).then(e=>{try{this.kuzzle.jwt=e.jwt,this.kuzzle.emit("loginAttempt",{success:!0})}catch(e){return Promise.reject(e)}return e.jwt}).catch(e=>{throw this.kuzzle.emit("loginAttempt",{success:!1,error:e.message}),e})}logout(){return this.kuzzle.query({controller:"auth",action:"logout"},{queuable:!1}).then(()=>{this.kuzzle.jwt=void 0})}updateMyCredentials(e,t,r={}){return this.kuzzle.query({strategy:e,body:t,controller:"auth",action:"updateMyCredentials"},r)}updateSelf(e,t={}){return this.kuzzle.query({body:e,controller:"auth",action:"updateSelf"},t)}validateMyCredentials(e,t,r={}){return this.kuzzle.query({strategy:e,body:t,controller:"auth",action:"validateMyCredentials"},r)}}},function(e,t){const r=Symbol();e.exports=class{constructor(e){this[r]=e}get kuzzle(){return this[r]}import(e,t){return this.kuzzle.query({controller:"bulk",action:"import",body:{bulkData:e}},t)}}},function(e,t,r){const i=r(12),o=Symbol();e.exports=class{constructor(e){this[o]=e}get kuzzle(){return this[o]}create(e,t,r={},i={}){if(!e)throw new Error("Kuzzle.collection.create: index is required");if(!t)throw new Error("Kuzzle.collection.create: collection is required");return this.kuzzle.query({index:e,collection:t,body:r,controller:"collection",action:"create"},i)}deleteSpecification(e,t,r={}){if(!e)throw new Error("Kuzzle.collection.deleteSpecification: index is required");if(!t)throw new Error("Kuzzle.collection.deleteSpecification: collection is required");return this.kuzzle.query({index:e,collection:t,controller:"collection",action:"deleteSpecification"},r)}exists(e,t,r={}){if(!e)throw new Error("Kuzzle.collection.exists: index is required");if(!t)throw new Error("Kuzzle.collection.exists: collection is required");return this.kuzzle.query({index:e,collection:t,controller:"collection",action:"exists"},r)}getMapping(e,t,r={}){if(!e)throw new Error("Kuzzle.collection.getMapping: index is required");if(!t)throw new Error("Kuzzle.collection.getMapping: collection is required");return this.kuzzle.query({index:e,collection:t,controller:"collection",action:"getMapping"},r)}getSpecifications(e,t,r={}){if(!e)throw new Error("Kuzzle.collection.getSpecifications: index is required");if(!t)throw new Error("Kuzzle.collection.getSpecifications: collection is required");return this.kuzzle.query({index:e,collection:t,controller:"collection",action:"getSpecifications"},r)}list(e,t={}){if(!e)throw new Error("Kuzzle.collection.list: index is required");const r={index:e,controller:"collection",action:"list",from:t.from,size:t.size};return delete t.from,delete t.size,this.kuzzle.query(r,t)}searchSpecifications(e={},t={}){const r={body:e,controller:"collection",action:"searchSpecifications"};for(const e of["from","size","scroll"])r[e]=t[e],delete t[e];return this.kuzzle.query(r,t).then(e=>new i(this.kuzzle,r,t,e))}truncate(e,t,r={}){if(!e)throw new Error("Kuzzle.collection.truncate: index is required");if(!t)throw new Error("Kuzzle.collection.truncate: collection is required");return this.kuzzle.query({index:e,collection:t,controller:"collection",action:"truncate"},r)}updateMapping(e,t,r,i={}){if(!e)throw new Error("Kuzzle.collection.updateMapping: index is required");if(!t)throw new Error("Kuzzle.collection.updateMapping: collection is required");return this.kuzzle.query({index:e,collection:t,body:r,controller:"collection",action:"updateMapping"},i)}updateSpecifications(e,t,r,i={}){if(!e)throw new Error("Kuzzle.collection.updateSpecifications: index is required");if(!t)throw new Error("Kuzzle.collection.updateSpecifications: collection is required");return this.kuzzle.query({index:e,collection:t,body:r,controller:"collection",action:"updateSpecifications"},i)}validateSpecifications(e,t={}){return this.kuzzle.query({body:e,controller:"collection",action:"validateSpecifications"},t)}}},function(e,t,r){const i=r(0);e.exports=class extends i{constructor(e,t,r,i){super(e,t,r,i),this.controller="collection",this.searchAction="searchSpecifications",this.scrollAction="scrollSpecifications"}}},function(e,t,r){const i=r(14),o=Symbol();e.exports=class{constructor(e){this[o]=e}get kuzzle(){return this[o]}count(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.count: index is required");if(!t)throw new Error("Kuzzle.document.count: collection is required");const o={index:e,collection:t,body:r,controller:"document",action:"count",includeTrash:i.includeTrash};return delete i.includeTrash,this.kuzzle.query(o,i).then(e=>e.count)}create(e,t,r,i,o={}){if(!e)throw new Error("Kuzzle.document.create: index is required");if(!t)throw new Error("Kuzzle.document.create: collection is required");if(!i)throw new Error("Kuzzle.document.create: body is required");const s={index:e,collection:t,_id:r,body:i,controller:"document",action:"create",refresh:o.refresh};return delete o.refresh,this.kuzzle.query(s,o)}createOrReplace(e,t,r,i,o={}){if(!e)throw new Error("Kuzzle.document.createOrReplace: index is required");if(!t)throw new Error("Kuzzle.document.createOrReplace: collection is required");if(!r)throw new Error("Kuzzle.document.createOrReplace: _id is required");if(!i)throw new Error("Kuzzle.document.createOrReplace: body is required");const s={index:e,collection:t,_id:r,body:i,controller:"document",action:"createOrReplace",refresh:o.refresh};return delete o.refresh,this.kuzzle.query(s,o)}delete(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.delete: index is required");if(!t)throw new Error("Kuzzle.document.delete: collection is required");if(!r)throw new Error("Kuzzle.document.delete: _id is required");const o={index:e,collection:t,_id:r,controller:"document",action:"delete",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}deleteByQuery(e,t,r={},i={}){if(!e)throw new Error("Kuzzle.document.deleteByQuery: index is required");if(!t)throw new Error("Kuzzle.document.deleteByQuery: collection is required");const o={index:e,collection:t,body:r,controller:"document",action:"deleteByQuery",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}get(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.get: index is required");if(!t)throw new Error("Kuzzle.document.get: collection is required");if(!r)throw new Error("Kuzzle.document.get: _id is required");const o={index:e,collection:t,_id:r,controller:"document",action:"get",includeTrash:i.includeTrash};return delete i.includeTrash,this.kuzzle.query(o,i)}mCreate(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.mCreate: index is required");if(!t)throw new Error("Kuzzle.document.mCreate: collection is required");if(!Array.isArray(r))throw new Error("Kuzzle.document.mCreate: documents must be an array");const o={index:e,collection:t,body:{documents:r},controller:"document",action:"mCreate",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}mCreateOrReplace(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.mCreateOrReplace: index is required");if(!t)throw new Error("Kuzzle.document.mCreateOrReplace: collection is required");if(!Array.isArray(r))throw new Error("Kuzzle.document.mCreateOrReplace: documents must be an array");const o={index:e,collection:t,body:{documents:r},controller:"document",action:"mCreateOrReplace",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}mDelete(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.mDelete: index is required");if(!t)throw new Error("Kuzzle.document.mDelete: collection is required");if(!Array.isArray(r))throw new Error("Kuzzle.document.mDelete: ids must be an array");const o={index:e,collection:t,body:{ids:r},controller:"document",action:"mDelete",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}mGet(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.mGet: index is required");if(!t)throw new Error("Kuzzle.document.mGet: collection is required");if(!Array.isArray(r))throw new Error("Kuzzle.document.mGet: ids must be an array");const o={index:e,collection:t,body:{ids:r},controller:"document",action:"mGet",includeTrash:i.includeTrash};return delete i.includeTrash,this.kuzzle.query(o,i)}mReplace(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.mReplace: index is required");if(!t)throw new Error("Kuzzle.document.mReplace: collection is required");if(!Array.isArray(r))throw new Error("Kuzzle.document.mReplace: documents must be an array");const o={index:e,collection:t,body:{documents:r},controller:"document",action:"mReplace",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}mUpdate(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.mUpdate: index is required");if(!t)throw new Error("Kuzzle.document.mUpdate: collection is required");if(!Array.isArray(r))throw new Error("Kuzzle.document.mUpdate: documents must be an array");const o={index:e,collection:t,body:{documents:r},controller:"document",action:"mUpdate",refresh:i.refresh};return delete i.refresh,this.kuzzle.query(o,i)}replace(e,t,r,i,o={}){if(!e)throw new Error("Kuzzle.document.replace: index is required");if(!t)throw new Error("Kuzzle.document.replace: collection is required");if(!r)throw new Error("Kuzzle.document.replace: _id is required");if(!i)throw new Error("Kuzzle.document.replace: body is required");const s={index:e,collection:t,_id:r,body:i,controller:"document",action:"replace",refresh:o.refresh};return delete o.refresh,this.kuzzle.query(s,o)}search(e,t,r={},o={}){if(!e)throw new Error("Kuzzle.document.search: index is required");if(!t)throw new Error("Kuzzle.document.search: collection is required");const s={index:e,collection:t,body:r,controller:"document",action:"search"};for(const e of["from","size","scroll","includeTrash"])s[e]=o[e],delete o[e];return this.kuzzle.query(s,o).then(e=>new i(this.kuzzle,s,o,e))}update(e,t,r,i,o={}){if(!e)throw new Error("Kuzzle.document.update: index is required");if(!t)throw new Error("Kuzzle.document.update: collection is required");if(!r)throw new Error("Kuzzle.document.update: _id is required");if(!i)throw new Error("Kuzzle.document.update: body is required");const s={index:e,collection:t,_id:r,body:i,controller:"document",action:"update",refresh:o.refresh,retryOnConflict:o.retryOnConflict};return delete o.refresh,delete o.retryOnConflict,this.kuzzle.query(s,o)}validate(e,t,r,i={}){if(!e)throw new Error("Kuzzle.document.validate: index is required");if(!t)throw new Error("Kuzzle.document.validate: collection is required");if(!r)throw new Error("Kuzzle.document.validate: body is required");return this.kuzzle.query({index:e,collection:t,body:r,controller:"document",action:"validate"},i)}}},function(e,t,r){const i=r(0);e.exports=class extends i{constructor(e,t,r,i){super(e,t,r,i),this.searchAction="search",this.scrollAction="scroll"}}},function(e,t){const r=Symbol();e.exports=class{constructor(e){this[r]=e}get kuzzle(){return this[r]}create(e,t){if(!e)throw new Error("Kuzzle.index.create: index is required");return this.kuzzle.query({index:e,controller:"index",action:"create"},t)}delete(e,t){if(!e)throw new Error("Kuzzle.index.delete: index is required");return this.kuzzle.query({index:e,controller:"index",action:"delete"},t)}exists(e,t){if(!e)throw new Error("Kuzzle.index.exists: index is required");return this.kuzzle.query({index:e,controller:"index",action:"exists"},t)}getAutoRefresh(e,t){if(!e)throw new Error("Kuzzle.index.getAutoRefresh: index is required");return this.kuzzle.query({index:e,controller:"index",action:"getAutoRefresh"},t)}list(e){return this.kuzzle.query({controller:"index",action:"list"},e)}mDelete(e,t){if(!Array.isArray(e))throw new Error("Kuzzle.index.mDelete: indexes must be an array");return this.kuzzle.query({controller:"index",action:"mDelete",body:{indexes:e}},t)}refresh(e,t){if(!e||""===e)throw new Error("Kuzzle.index.refresh: index is required");return this.kuzzle.query({index:e,controller:"index",action:"refresh"},t)}refreshInternal(e){return this.kuzzle.query({controller:"index",action:"refreshInternal"},e)}setAutoRefresh(e,t,r){if(!e||""===e)throw new Error("Kuzzle.index.setAutoRefresh: index is required");if("boolean"!=typeof t)throw new Error("Kuzzle.index.setAutoRefresh: autoRefresh must be a boolean");return this.kuzzle.query({index:e,controller:"index",action:"setAutoRefresh",body:{autoRefresh:t}},r)}}},function(e,t,r){const i=r(17),o=Symbol();e.exports=class{constructor(e){this[o]=e,this.subscriptions={filters:{},channels:{}}}get kuzzle(){return this[o]}count(e,t={}){if(!e)throw new Error("Kuzzle.realtime.count: roomId is required");return this.kuzzle.query({controller:"realtime",action:"count",body:{roomId:e}},t).then(e=>e.count)}list(e={}){return this.kuzzle.query({controller:"realtime",action:"list"},e)}publish(e,t,r,i={}){if(!e)throw new Error("Kuzzle.realtime.publish: index is required");if(!t)throw new Error("Kuzzle.realtime.publish: collection is required");if(!r)throw new Error("Kuzzle.realtime.publish: body is required");const o={index:e,collection:t,body:r,controller:"realtime",action:"publish"};return this.kuzzle.query(o,i)}subscribe(e,t,r,o,s={}){if(!e)throw new Error("Kuzzle.realtime.subscribe: index is required");if(!t)throw new Error("Kuzzle.realtime.subscribe: collection is required");if(!r)throw new Error("Kuzzle.realtime.subscribe: body is required");if(!o||"function"!=typeof o)throw new Error("Kuzzle.realtime.subscribe: a callback function is required");const n=new i(this.kuzzle,e,t,r,o,s);return n.subscribe().then(e=>(this.subscriptions[n.id]||(this.subscriptions[n.id]=[]),this.subscriptions[n.id].push(n),e))}unsubscribe(e,t={}){if(!e)throw new Error("Kuzzle.realtime.unsubscribe: roomId is required");const r=this.subscriptions[e];if(!r)return Promise.reject(new Error(`not subscribed to ${e}`));for(const e of r)e.removeListeners();return delete this.subscriptions[e],this.kuzzle.query({controller:"realtime",action:"unsubscribe",body:{roomId:e}},t)}validate(e,t,r,i={}){if(!e)throw new Error("Kuzzle.realtime.validate: index is required");if(!t)throw new Error("Kuzzle.realtime.validate: collection is required");if(!r)throw new Error("Kuzzle.realtime.validate: body is required");return this.kuzzle.query({index:e,collection:t,body:r,controller:"realtime",action:"validate"},i)}}},function(e,t){e.exports=class{constructor(e,t,r,i,o,s={}){this.kuzzle=e,this.index=t,this.collection=r,this.callback=o,this.options=s,this.id=null,this.channel=null,this.request={index:t,collection:r,body:i,controller:"realtime",action:"subscribe"};for(const e of["state","scope","users","volatile"])this.request[e]=this.options[e],delete this.options[e];this.autoResubscribe="boolean"==typeof s.autoResubscribe?s.autoResubscribe:e.autoResubscribe,this.subscribeToSelf="boolean"!=typeof s.subscribeToSelf||s.subscribeToSelf;for(const e of["autoResubscribe","subscribeToSelf"])delete this.options[e];this._channelListener=this._channelListener.bind(this),this._reSubscribeListener=this._reSubscribeListener.bind(this)}subscribe(){return this.kuzzle.query(this.request,this.options).then(e=>(this.id=e.roomId,this.channel=e.channel,this.kuzzle.network.on(this.channel,this._channelListener),this.kuzzle.addListener("reconnected",this._reSubscribeListener),e))}removeListeners(){this.kuzzle.removeListener("reconnected",this._reSubscribeListener),this.channel&&this.kuzzle.network.removeListener(this.channel,this._channelListener)}_channelListener(e){const t=void 0!==e.volatile&&e.volatile.sdkInstanceId===this.kuzzle.network.id;!this.subscribeToSelf&&t||this.callback(e)}_reSubscribeListener(){if(this.autoResubscribe)return this.subscribe()}}},function(e,t){const r=Symbol();e.exports=class{constructor(e){this[r]=e}get kuzzle(){return this[r]}adminExists(e){return this.kuzzle.query({controller:"server",action:"adminExists"},e).then(e=>{if("boolean"!=typeof e.exists){const t=new Error("adminExists: bad response format");return t.status=400,t.response=e,Promise.reject(t)}return e.exists})}getAllStats(e){return this.kuzzle.query({controller:"server",action:"getAllStats"},e)}getConfig(e){return this.kuzzle.query({controller:"server",action:"getConfig"},e)}getLastStats(e){return this.kuzzle.query({controller:"server",action:"getLastStats"},e)}getStats(e,t,r){return this.kuzzle.query({controller:"server",action:"getStats",startTime:e,stopTime:t},r)}info(e){return this.kuzzle.query({controller:"server",action:"info"},e)}now(e){return this.kuzzle.query({controller:"server",action:"now"},e).then(e=>{if("number"!=typeof e.now){const t=new Error("now: bad response format");return t.status=400,t.response=e,Promise.reject(t)}return e.now})}}},function(e,t,r){const i=r(3),o=r(20),s=r(4),n=r(21),u=r(1),l=r(22),c=Symbol();e.exports=class{constructor(e){this[c]=e}get kuzzle(){return this[c]}createCredentials(e,t,r,i={}){if(!t)throw new Error("Kuzzle.security.createCredentials: _id is required");if(!e)throw new Error("Kuzzle.security.createCredentials: strategy is required");if(!r)throw new Error("Kuzzle.security.createCredentials: body is required");return this.kuzzle.query({_id:t,strategy:e,body:r,controller:"security",action:"createCredentials"},i)}createFirstAdmin(e,t,r={}){if(!e)throw new Error("Kuzzle.security.createFirstAdmin: _id is required");if(!t)throw new Error("Kuzzle.security.createFirstAdmin: body is required");const i={_id:e,body:t,controller:"security",action:"createFirstAdmin",reset:r.reset};return delete r.reset,this.kuzzle.query(i,r).then(e=>new u(this.kuzzle,e._id,e._source,e._meta))}createOrReplaceProfile(e,t,r={}){if(!e)throw new Error("Kuzzle.security.createOrReplaceProfile: _id is required");if(!t)throw new Error("Kuzzle.security.createOrReplaceProfile: body is required");const i={_id:e,body:t,controller:"security",action:"createOrReplaceProfile",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(i,r).then(e=>new s(this.kuzzle,e._id,e._source.policies))}createOrReplaceRole(e,t,r={}){if(!e)throw new Error("Kuzzle.security.createOrReplaceRole: _id is required");if(!t)throw new Error("Kuzzle.security.createOrReplaceRole: body is required");const o={_id:e,body:t,controller:"security",action:"createOrReplaceRole",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(o,r).then(e=>new i(this.kuzzle,e._id,e._source.controllers))}createProfile(e,t,r={}){if(!e)throw new Error("Kuzzle.security.createProfile: _id is required");if(!t)throw new Error("Kuzzle.security.createProfile: body is required");const i={_id:e,body:t,controller:"security",action:"createProfile",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(i,r).then(e=>new s(this.kuzzle,e._id,e._source.policies))}createRole(e,t,r={}){if(!e)throw new Error("Kuzzle.security.createRole: _id is required");if(!t)throw new Error("Kuzzle.security.createRole: body is required");const o={_id:e,body:t,controller:"security",action:"createRole",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(o,r).then(e=>new i(this.kuzzle,e._id,e._source.controllers))}createUser(e,t,r={}){if(!e)throw new Error("Kuzzle.security.createUser: _id is required");if(!t)throw new Error("Kuzzle.security.createUser: body is required");if(!t.content)throw new Error("Kuzzle.security.createUser: body.content is required");if(!t.credentials)throw new Error("Kuzzle.security.createUser: body.credentials is required");const i={_id:e,body:t,controller:"security",action:"createUser",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(i,r).then(e=>new u(this.kuzzle,e._id,e._source,e._meta))}deleteCredentials(e,t,r={}){if(!t)throw new Error("Kuzzle.security.deleteCredentials: _id is required");if(!e)throw new Error("Kuzzle.security.deleteCredentials: strategy is required");return this.kuzzle.query({strategy:e,_id:t,controller:"security",action:"deleteCredentials"},r)}deleteProfile(e,t={}){if(!e)throw new Error("Kuzzle.security.deleteProfile: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"deleteProfile"},t)}deleteRole(e,t={}){if(!e)throw new Error("Kuzzle.security.deleteRole: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"deleteRole"},t)}deleteUser(e,t={}){if(!e)throw new Error("Kuzzle.security.deleteUser: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"deleteUser"},t)}getAllCredentialFields(e={}){return this.kuzzle.query({controller:"security",action:"getAllCredentialFields"},e)}getCredentialFields(e,t={}){if(!e)throw new Error("Kuzzle.security.getCredentialFields: strategy is required");return this.kuzzle.query({strategy:e,controller:"security",action:"getCredentialFields"},t)}getCredentials(e,t,r={}){if(!e)throw new Error("Kuzzle.security.getCredentials: strategy is required");if(!t)throw new Error("Kuzzle.security.getCredentials: _id is required");return this.kuzzle.query({strategy:e,_id:t,controller:"security",action:"getCredentials"},r)}getCredentialsById(e,t,r={}){if(!e)throw new Error("Kuzzle.security.getCredentialsById: strategy is required");if(!t)throw new Error("Kuzzle.security.getCredentialsById: _id is required");return this.kuzzle.query({strategy:e,_id:t,controller:"security",action:"getCredentialsById"},r)}getProfile(e,t={}){if(!e)throw new Error("Kuzzle.security.getProfile: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"getProfile"},t).then(e=>new s(this.kuzzle,e._id,e._source.policies))}getProfileMapping(e={}){return this.kuzzle.query({controller:"security",action:"getProfileMapping"},e)}getProfileRights(e,t={}){if(!e)throw new Error("Kuzzle.security.getProfileRights: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"getProfileRights"},t).then(e=>e.hits)}getRole(e,t={}){if(!e)throw new Error("Kuzzle.security.getRole: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"getRole"},t).then(e=>new i(this.kuzzle,e._id,e._source.controllers))}getRoleMapping(e={}){return this.kuzzle.query({controller:"security",action:"getRoleMapping"},e)}getUser(e,t={}){if(!e)throw new Error("Kuzzle.security.getUser: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"getUser"},t).then(e=>new u(this.kuzzle,e._id,e._source,e._meta))}getUserMapping(e={}){return this.kuzzle.query({controller:"security",action:"getUserMapping"},e)}getUserRights(e,t={}){if(!e)throw new Error("Kuzzle.security.getUserRights: _id is required");return this.kuzzle.query({_id:e,controller:"security",action:"getUserRights"},t).then(e=>e.hits)}hasCredentials(e,t,r={}){if(!e)throw new Error("Kuzzle.security.hasCredentials: strategy is required");if(!t)throw new Error("Kuzzle.security.hasCredentials: _id is required");return this.kuzzle.query({strategy:e,_id:t,controller:"security",action:"hasCredentials"},r)}mDeleteProfiles(e,t={}){if(!Array.isArray(e))throw new Error("Kuzzle.security.mDeleteProfiles: ids must be an array");const r={controller:"security",action:"mDeleteProfiles",body:{ids:e},refresh:t.refresh};return delete t.refresh,this.kuzzle.query(r,t)}mDeleteRoles(e,t={}){if(!Array.isArray(e))throw new Error("Kuzzle.security.mDeleteRoles: ids must be an array");const r={controller:"security",action:"mDeleteRoles",body:{ids:e},refresh:t.refresh};return delete t.refresh,this.kuzzle.query(r,t)}mDeleteUsers(e,t={}){if(!Array.isArray(e))throw new Error("Kuzzle.security.mDeleteUsers: ids must be an array");const r={controller:"security",action:"mDeleteUsers",body:{ids:e},refresh:t.refresh};return delete t.refresh,this.kuzzle.query(r,t)}mGetProfiles(e,t={}){if(!Array.isArray(e))throw new Error("Kuzzle.security.mGetProfiles: ids must be an array");return this.kuzzle.query({controller:"security",action:"mGetProfiles",body:{ids:e}},t).then(e=>e.hits.map(e=>new s(this.kuzzle,e._id,e._source.policies)))}mGetRoles(e,t={}){if(!Array.isArray(e))throw new Error("Kuzzle.security.mGetRoles: ids must be an array");return this.kuzzle.query({controller:"security",action:"mGetRoles",body:{ids:e}},t).then(e=>e.hits.map(e=>new i(this.kuzzle,e._id,e._source.controllers)))}replaceUser(e,t,r={}){if(!e)throw new Error("Kuzzle.security.replaceUser: _id is required");if(!t)throw new Error("Kuzzle.security.replaceUser: body is required");const i={_id:e,body:t,controller:"security",action:"replaceUser",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(i,r).then(e=>new u(this.kuzzle,e._id,e._source,e._meta))}searchProfiles(e,t={}){const r={body:e,controller:"security",action:"searchProfiles"};for(const e of["from","size","scroll"])r[e]=t[e],delete t[e];return this.kuzzle.query(r,t).then(e=>new n(this.kuzzle,r,t,e))}searchRoles(e,t={}){const r={body:e,controller:"security",action:"searchRoles"};for(const e of["from","size"])r[e]=t[e],delete t[e];return this.kuzzle.query(r,t).then(e=>new o(this.kuzzle,r,t,e))}searchUsers(e,t={}){const r={body:e,controller:"security",action:"searchUsers"};for(const e of["from","size","scroll"])r[e]=t[e],delete t[e];return this.kuzzle.query(r,t).then(e=>new l(this.kuzzle,r,t,e))}updateCredentials(e,t,r,i={}){if(!t)throw new Error("Kuzzle.security.updateCredentials: _id is required");if(!e)throw new Error("Kuzzle.security.updateCredentials: strategy is required");if(!r)throw new Error("Kuzzle.security.updateCredentials: body is required");return this.kuzzle.query({strategy:e,_id:t,body:r,controller:"security",action:"updateCredentials"},i)}updateProfile(e,t,r={}){if(!e)throw new Error("Kuzzle.security.updateProfile: _id is required");if(!t)throw new Error("Kuzzle.security.updateProfile: body is required");const i={_id:e,body:t,controller:"security",action:"updateProfile",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(i,r).then(e=>new s(this.kuzzle,e._id,e._source.policies))}updateProfileMapping(e,t={}){return this.kuzzle.query({body:e,controller:"security",action:"updateProfileMapping"},t)}updateRole(e,t,r={}){if(!e)throw new Error("Kuzzle.security.updateRole: _id is required");if(!t)throw new Error("Kuzzle.security.updateRole: body is required");const o={_id:e,body:t,controller:"security",action:"updateRole",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(o,r).then(e=>new i(this.kuzzle,e._id,e._source.controllers))}updateRoleMapping(e,t={}){return this.kuzzle.query({body:e,controller:"security",action:"updateRoleMapping"},t)}updateUser(e,t,r={}){if(!e)throw new Error("Kuzzle.security.updateUser: _id is required");if(!t)throw new Error("Kuzzle.security.updateUser: body is required");const i={_id:e,body:t,controller:"security",action:"updateUser",refresh:r.refresh};return delete r.refresh,this.kuzzle.query(i,r).then(e=>new u(this.kuzzle,e._id,e._source,e._meta))}updateUserMapping(e,t={}){return this.kuzzle.query({body:e,controller:"security",action:"updateUserMapping"},t)}validateCredentials(e,t,r,i={}){if(!t)throw new Error("Kuzzle.security.validateCredentials: _id is required");if(!e)throw new Error("Kuzzle.security.validateCredentials: strategy is required");if(!r)throw new Error("Kuzzle.security.validateCredentials: body is required");return this.kuzzle.query({_id:t,strategy:e,body:r,controller:"security",action:"validateCredentials"},i)}}},function(e,t,r){const i=r(3),o=r(0);e.exports=class extends o{constructor(e,t,r,o){super(e,t,r,o),this.searchAction="searchRoles",this.scrollAction=null,this.hits=this.response.hits.map(e=>new i(this.kuzzle,e._id,e._source.controllers))}next(){if(this.request.scroll||this.request.sort)throw new Error("only from/size params are allowed for role search");return super.next().then(e=>e?(this.hits=this.response.hits.map(e=>new i(this.kuzzle,e._id,e._source.controllers)),this):e)}}},function(e,t,r){const i=r(4),o=r(0);e.exports=class extends o{constructor(e,t,r,o){super(e,t,r,o),this.searchAction="searchProfiles",this.scrollAction="scrollProfiles",this.hits=o.hits.map(e=>new i(this.kuzzle,e._id,e._source.policies))}next(){return super.next().then(e=>e?(this.hits=this.response.hits.map(e=>new i(this.kuzzle,e._id,e._source.policies)),this):e)}}},function(e,t,r){const i=r(0),o=r(1);e.exports=class extends i{constructor(e,t,r,i){super(e,t,r,i),this.searchAction="searchUsers",this.scrollAction="scrollUsers",this.hits=this.response.hits.map(e=>new o(this.kuzzle,e._id,e._source,e._meta))}next(){return super.next().then(e=>e?(this.hits=this.response.hits.map(e=>new o(this.kuzzle,e._id,e._source,e._meta)),this):e)}}},function(e,t){const r={getter:!0,required:["_id"]},i={getter:!0,required:["_id","field"]},o={getter:!0,required:["keys"]},s={getter:!0,required:["_id","member"]},n={getter:!0,required:["_id","cursor"],opts:["match","count"],mapResults:g},u={getter:!0,required:["_id","start","stop"],opts:y,mapResults:b},l={getter:!0,required:["_id","min","max"],opts:y,mapResults:b},c={required:["_id"]},d={required:["_id","value"]},a={append:d,bitcount:{getter:!0,required:["_id"],opts:["start","end"]},bitop:{required:["_id","operation","keys"]},bitpos:{getter:!0,required:["_id","bit"],opts:["start","end"]},dbsize:{getter:!0},decr:c,decrby:d,del:{required:["keys"]},exists:o,expire:{required:["_id","seconds"],mapResults:Boolean},expireat:{required:["_id","timestamp"],mapResults:Boolean},flushdb:{mapResults:q},geoadd:{required:["_id","points"]},geodist:{getter:!0,required:["_id","member1","member2"],opts:["unit"],mapResults:parseFloat},geohash:{getter:!0,required:["_id","members"]},geopos:{getter:!0,required:["_id","members"],mapResults:function(e){return e.map(e=>e.map(parseFloat))}},georadius:{getter:!0,required:["_id","lon","lat","distance","unit"],opts:z,mapResults:w},georadiusbymember:{getter:!0,required:["_id","member","distance","unit"],opts:z,mapResults:w},get:r,getbit:{getter:!0,required:["_id","offset"]},getrange:{getter:!0,required:["_id","start","end"]},getset:d,hdel:{required:["_id","fields"]},hexists:{getter:!0,required:["_id","field"],mapResults:Boolean},hget:i,hgetall:{getter:!0,required:["_id"]},hincrby:{required:["_id","field","value"]},hincrbyfloat:{required:["_id","field","value"],mapResults:parseFloat},hkeys:r,hlen:r,hmget:{getter:!0,required:["_id","fields"]},hmset:{required:["_id","entries"],mapResults:q},hscan:n,hset:{required:["_id","field","value"],mapResults:Boolean},hsetnx:{required:["_id","field","value"],mapResults:Boolean},hstrlen:i,hvals:r,incr:c,incrby:d,incrbyfloat:{required:["_id","value"],mapResults:parseFloat},keys:{getter:!0,required:["pattern"]},lindex:{getter:!0,required:["_id","idx"]},linsert:{required:["_id","position","pivot","value"]},llen:r,lpop:c,lpush:{required:["_id","values"]},lpushx:d,lrange:{getter:!0,required:["_id","start","stop"]},lrem:{required:["_id","count","value"]},lset:{required:["_id","index","value"],mapResults:q},ltrim:{required:["_id","start","stop"],mapResults:q},mget:o,mset:{required:["entries"],mapResults:q},msetnx:{required:["entries"],mapResults:Boolean},object:{getter:!0,required:["_id","subcommand"]},persist:{required:["_id"],mapResults:Boolean},pexpire:{required:["_id","milliseconds"],mapResults:Boolean},pexpireat:{required:["_id","timestamp"],mapResults:Boolean},pfadd:{required:["_id","elements"],mapResults:Boolean},pfcount:o,pfmerge:{required:["_id","sources"],mapResults:q},ping:{getter:!0},psetex:{required:["_id","value","milliseconds"],mapResults:q},pttl:r,randomkey:{getter:!0},rename:{required:["_id","newkey"],mapResults:q},renamenx:{required:["_id","newkey"],mapResults:Boolean},rpop:c,rpoplpush:{required:["source","destination"]},rpush:{required:["_id","values"]},rpushx:d,sadd:{required:["_id","members"]},scan:{getter:!0,required:["cursor"],opts:["match","count"],mapResults:g},scard:r,sdiff:{getter:!0,required:["_id","keys"]},sdiffstore:{required:["_id","keys","destination"]},set:{required:["_id","value"],opts:["ex","px","nx","xx"],mapResults:q},setex:{required:["_id","value","seconds"],mapResults:q},setnx:{required:["_id","value"],mapResults:Boolean},sinter:o,sinterstore:{required:["destination","keys"]},sismember:{getter:!0,required:["_id","member"],mapResults:Boolean},smembers:r,smove:{required:["_id","destination","member"],mapResults:Boolean},sort:{getter:!0,required:["_id"],opts:["alpha","by","direction","get","limit"]},spop:{required:["_id"],opts:["count"],mapResults:m},srandmember:{getter:!0,required:["_id"],opts:["count"],mapResults:m},srem:{required:["_id","members"]},sscan:n,strlen:r,sunion:o,sunionstore:{required:["destination","keys"]},time:{getter:!0,mapResults:function(e){return e.map(e=>parseInt(e))}},touch:{required:["keys"]},ttl:r,type:r,zadd:{required:["_id","elements"],opts:["nx","xx","ch","incr"]},zcard:r,zcount:{getter:!0,required:["_id","min","max"]},zincrby:{required:["_id","member","value"]},zinterstore:{required:["_id","keys"],opts:["weights","aggregate"]},zlexcount:{getter:!0,required:["_id","min","max"]},zrange:u,zrangebylex:{getter:!0,required:["_id","min","max"],opts:["limit"]},zrevrangebylex:{getter:!0,required:["_id","min","max"],opts:["limit"]},zrangebyscore:l,zrank:s,zrem:{required:["_id","members"]},zremrangebylex:{required:["_id","min","max"]},zremrangebyrank:{required:["_id","start","stop"]},zremrangebyscore:{required:["_id","min","max"]},zrevrange:u,zrevrangebyscore:l,zrevrank:s,zscan:n,zscore:{getter:!0,required:["_id","member"],mapResults:parseFloat},zunionstore:{required:["_id","keys"],opts:["weights","aggregate"]}},h=Symbol();class f{constructor(e){this[h]=e}get kuzzle(){return this[h]}}for(const e of Object.keys(a))f.prototype[e]=function(...t){const r=a[e],i={action:e,controller:"ms"},o={};r.getter||(i.body={});for(const o of r.required||[]){const s=t.shift();if(void 0===s)throw new Error(`ms.${e}: missing parameter ${o}`);p(i,r.getter,o,s)}if(t.length>1)throw new Error(`ms.${e}: too many parameters provided`);if(t.length){if("object"!=typeof t[0]||Array.isArray(t[0]))throw new Error(`ms.${e}: invalid optional paramater (expected an object`);if(Object.assign(o,t[0]),Array.isArray(r.opts))for(const e of r.opts)null!==o[e]&&void 0!==o[e]&&(p(i,r.getter,e,o[e]),delete o[e])}return"function"==typeof r.opts&&r.opts(i,o),this.kuzzle.query(i,o).then(e=>r.mapResults?r.mapResults(e.result):e.result)};function p(e,t,r,i){t||"_id"===r?e[r]=i:e.body[r]=i}function z(e,t){const r=[];Object.keys(t).filter(function(e){return t[e]&&-1!==["withcoord","withdist","count","sort"].indexOf(e)}).forEach(function(e){"withcoord"===e||"withdist"===e?(r.push(e),delete t[e]):"count"!==e&&"sort"!==e||("count"===e&&r.push("count"),r.push(t[e])),delete t[e]}),r.length>0&&(e.options=r)}function y(e,t){e.options=["withscores"],t.limit&&(e.limit=t.limit,delete t.limit)}function w(e){return Array.isArray(e[0])?e.map(function(e){const t={name:e.shift()};for(const r of e)Array.isArray(r)?t.coordinates=r.map(parseFloat):t.distance=parseFloat(r);return t}):e.map(function(e){return{name:e}})}function m(e){return Array.isArray(e)?e:[e]}function q(){}function b(e){const t=[];for(let r=0;r<e.length;r+=2)t.push({member:e[r],score:parseFloat(e[r+1])});return t}function g(e){return{cursor:e[0],values:e[1]}}e.exports=f},function(e,t,r){e.exports=function(e,t){switch(e){case"http":return new(r(25))(t);case"websocket":if("undefined"!=typeof window&&"undefined"==typeof WebSocket)throw new Error("Aborting: no websocket support detected.");return new(r(26))(t);case"socketio":if(!window.io)throw new Error("Aborting: no socket.io library loaded.");return new(r(27))(t);default:throw new Error('Aborting: unknown protocol "'+e+'" (only "http", "websocket" and "socketio" are available).')}}},function(e,t,r){"use strict";const i=r(5),o={routes:{auth:{login:{verb:"POST",url:"/_login/:strategy"}},bulk:{import:{verb:"POST",url:"/:index/:collection/_bulk"}},document:{create:{verb:"POST",url:"/:index/:collection/_create"}},security:{createFirstAdmin:{verb:"POST",url:"/_createFirstAdmin"},createRestrictedUser:{verb:"POST",url:"/users/_createRestricted"},createUser:{verb:"POST",url:"/users/_create"}}}};class s extends i{constructor(e={}){if(super(e),"string"!=typeof this.host||""===this.host)throw new Error("options.host is required");if(e.http&&e.http.customRoutes)for(const t in e.http.customRoutes)e.http.customRoutes.hasOwnProperty(t)&&(this.http.routes[t]=Object.assign(this.http.routes[t]||{},e.http.customRoutes[t]))}get http(){return o}get protocol(){return this.ssl?"https":"http"}connect(){return this.autoQueue&&this.startQueuing(),"ready"===this.state?Promise.resolve():this._sendHttpRequest("GET","/").then(e=>{const t=e.result.serverInfo.kuzzle.api.routes;for(const e of Object.keys(t)){void 0===this.http.routes[e]&&(this.http.routes[e]={});for(const r of Object.keys(t[e]))void 0===this.http.routes[e][r]&&Array.isArray(t[e][r].http)&&t[e][r].http.length>0&&(this.http.routes[e][r]=t[e][r].http[0])}this.clientConnected()}).catch(e=>{const t=new Error(`Unable to connect to kuzzle server at ${this.host}:${this.port}`);throw t.internal=e,this.emit("networkError",t),e})}send(e){const t={action:void 0,body:void 0,collection:void 0,controller:void 0,headers:{"Content-Type":"application/json"},index:void 0,meta:void 0,requestId:void 0},r={};for(const i of Object.keys(e)){const o=e[i];"body"===i?t.body=JSON.stringify(o):"jwt"===i?t.headers.authorization="Bearer "+o:"volatile"===i?t.headers["x-kuzzle-volatile"]=JSON.stringify(o):t.hasOwnProperty(i)?t[i]=o:r[i]=o}t.headers["Content-Length"]=Buffer.byteLength(t.body||"");const i=this.http.routes[t.controller]&&this.http.routes[t.controller][t.action];if(void 0===i){const e=new Error(`No route found for ${t.controller}/${t.action}`);this.emit(t.requestId,{status:400,error:e})}const o=i.verb,s=/\/:([^/]*)/;let n=i.url,u=s.exec(n);for(;u;)n=n.replace(s,"/"+e[u[1]]),delete r[u[1]],u=s.exec(n);const l=[];for(const e of Object.keys(r)){const t=r[e];Array.isArray(t)?l.push(...t.map(t=>`${e}=${t}`)):l.push(`${e}=${t}`)}l.length>0&&(n+="?"+l.join("&")),this._sendHttpRequest(o,n,t).then(e=>this.emit(t.requestId,e)).catch(e=>this.emit(t.requestId,{error:e}))}_sendHttpRequest(e,t,i={}){if("undefined"==typeof XMLHttpRequest){const o=r(!function(){var e=new Error("Cannot find module 'min-req-promise'");throw e.code="MODULE_NOT_FOUND",e}()),s=`${this.protocol}://${this.host}:${this.port}${t}`;return o.request(s,e,{headers:i.headers,body:i.body}).then(e=>JSON.parse(e.body))}return new Promise((r,o)=>{const s=new XMLHttpRequest,n=`${this.protocol}://${this.host}:${this.port}${t}`;s.open(e,n);for(const e of Object.keys(i.headers||{}))s.setRequestHeader(e,i.headers[e]);s.onload=(()=>{try{const e=JSON.parse(s.responseText);r(e)}catch(e){o(e)}}),s.send(i.body)})}}for(const e of["protocol"])Object.defineProperty(s.prototype,e,{enumerable:!0});e.exports=s},function(e,t,r){"use strict";const i=r(7);let o;e.exports=class extends i{constructor(e={}){if(super(e),"string"!=typeof this.host||""===this.host)throw new Error("options.host is required");o="undefined"!=typeof WebSocket?WebSocket:r(!function(){var e=new Error("Cannot find module 'uws'");throw e.code="MODULE_NOT_FOUND",e}()),this.client=null,this.lasturl=null}connect(){return new Promise((e,t)=>{const r=(this.ssl?"wss://":"ws://")+this.host+":"+this.port,i="undefined"!=typeof window?void 0:{perMessageDeflate:!1};super.connect(),r!==this.lasturl&&(this.wasConnected=!1,this.lasturl=r),this.client=new o(r,i),this.client.onopen=(()=>(this.clientConnected(),e())),this.client.onclose=((e,t)=>{let r,i=t;if("number"==typeof e?r=e:(r=e.code,e.reason&&(i=e.reason)),1e3===r)this.clientDisconnected();else if(this.wasConnected){const e=new Error(i);e.status=r,this.clientNetworkError(e)}}),this.client.onerror=(e=>{const r=e instanceof Error&&e||new Error(e);if(this.clientNetworkError(r),[this.client.CLOSING,this.client.CLOSED].indexOf(this.client.readyState)>-1)return t(r)}),this.client.onmessage=(e=>{const t=JSON.parse(e.data||e);t.room?this.emit(t.room,t):this.emit("discarded",t)})})}send(e){this.client&&this.client.readyState===this.client.OPEN&&this.client.send(JSON.stringify(e))}close(){this.state="offline",this.removeAllListeners(),this.wasConnected=!1,this.client&&this.client.close(),this.client=null,this.stopRetryingToConnect=!0,super.close()}}},function(e,t,r){"use strict";const i=r(7);e.exports=class extends i{constructor(e={}){if(super(e),"string"!=typeof this.host||""===this.host)throw new Error("options.host is required");this.socket=null,this.forceDisconnect=!1,this.eventsWrapper={}}connect(){return new Promise((e,t)=>{super.connect(),this.socket=window.io((this.ssl?"https://":"http://")+this.host+":"+this.port,{reconnection:this.autoReconnect,reconnectionDelay:this.reconnectionDelay,forceNew:!0}),this.socket.on("connect",()=>e(this.clientConnected())),this.socket.on("connect_error",e=>{this.clientNetworkError(e),t(e)}),this.socket.on("disconnect",()=>{if(this.forceDisconnect)this.clientDisconnected();else{const e=new Error("An error occurred, kuzzle may not be ready yet");e.status=500,this.clientNetworkError(e),t(e)}this.forceDisconnect=!1})})}addListener(e,t,r=!1){return this._addEventWrapper(e,t,r),super.addListener(e,t,r),this}prependListener(e,t,r=!1){return this._addEventWrapper(e,t,r),super.prependListener(e,t,r)}removeListener(e,t){return this.eventsWrapper[e]&&(this.eventsWrapper[e].listeners.delete(t),0===this.eventsWrapper[e].listeners.size&&(this.socket.off(e,this.eventsWrapper[e].wrapper),delete this.eventsWrapper[e]),super.removeListener(e,t)),this}removeAllListeners(e){if(void 0!==e){if(void 0!==this.eventsWrapper[e])for(const t of this.eventsWrapper[e].listeners)this.removeListener(e,t)}else for(const e of Object.keys(this.eventsWrapper))this.removeAllListeners(e);return this}send(e){this.socket.emit("kuzzle",e)}close(){this.forceDisconnect=!0,this.state="offline",this.socket.close(),this.socket=null,super.close()}_addEventWrapper(e,t,r=!1){if(!this.eventsWrapper[e]){const t=(...t)=>this.emit(e,...t);this.eventsWrapper[e]={wrapper:t,listeners:new Set},-1===["connect","connect_error","disconnect"].indexOf(e)&&(r?this.socket.once(e,t):this.socket.on(e,t))}this.eventsWrapper[e].listeners.add(t)}}}])});
//# sourceMappingURL=kuzzle.js.map